import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Search, FileText, Eye, Package } from "lucide-react";
import { useBuyers } from "@/hooks/useBuyers";
import { useDbRugs } from "@/hooks/useDbRugs";
const MerchandisingThumbnails = ({ rugs, onCreatePDOC }) => {
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedRug, setSelectedRug] = useState(null);
    const [selectedBuyerId, setSelectedBuyerId] = useState(null);
    const { buyers, isLoading: buyersLoading } = useBuyers();
    // Get all rugs from database (all users) for product search
    const { data: allDbRugs = [], isLoading: rugsLoading } = useDbRugs(''); // Empty userId to get all rugs
    // Combine rugs from props and database rugs
    const allRugs = [...rugs, ...allDbRugs];
    const filteredRugs = allRugs.filter(rug => rug.designName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rug.construction?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rug.quality?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rug.color?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rug.buyerName?.toLowerCase().includes(searchTerm.toLowerCase()));
    const handleCreatePDOC = () => {
        if (selectedRug && selectedBuyerId) {
            onCreatePDOC(selectedRug, selectedBuyerId);
            setSelectedRug(null);
            setSelectedBuyerId(null);
        }
    };
    return (_jsxs("div", { className: "p-6 space-y-6", children: [_jsxs("div", { className: "flex flex-col md:flex-row md:items-center justify-between gap-4", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-900", children: "Product Search" }), _jsx("p", { className: "text-gray-600", children: "Browse all products from sampling department" })] }), _jsxs(Badge, { variant: "outline", className: "w-fit", children: [filteredRugs.length, " of ", allRugs.length, " products ", rugsLoading ? '(Loading...)' : ''] })] }), _jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400" }), _jsx(Input, { placeholder: "Search by design name, construction, quality, color, or buyer...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10" })] }) }) }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4", children: filteredRugs.map((rug) => (_jsxs(Card, { className: "hover:shadow-lg transition-shadow cursor-pointer", children: [_jsxs(CardHeader, { className: "pb-3", children: [_jsx("div", { className: "aspect-square bg-gray-100 rounded-lg flex items-center justify-center mb-3", children: _jsx(Package, { className: "h-12 w-12 text-gray-400" }) }), _jsx(CardTitle, { className: "text-sm font-medium line-clamp-2", children: rug.designName })] }), _jsx(CardContent, { className: "pt-0 pb-3", children: _jsxs("div", { className: "space-y-2 text-xs text-gray-600", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Construction:" }), _jsx("span", { className: "font-medium", children: rug.construction })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Quality:" }), _jsx("span", { className: "font-medium", children: rug.quality })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Size:" }), _jsx("span", { className: "font-medium", children: rug.size })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Color:" }), _jsx("span", { className: "font-medium truncate", children: rug.color })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Order Type:" }), _jsx("span", { className: "font-medium", children: rug.orderType })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Buyer:" }), _jsx("span", { className: "font-medium truncate", children: rug.buyerName })] })] }) }), _jsxs(CardFooter, { className: "pt-0 flex gap-2", children: [_jsxs(Dialog, { children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { variant: "outline", size: "sm", className: "flex-1", children: [_jsx(Eye, { className: "h-4 w-4 mr-2" }), "View"] }) }), _jsxs(DialogContent, { className: "max-w-2xl", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: rug.designName }) }), _jsxs("div", { className: "grid grid-cols-2 gap-4 py-4", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Basic Information" }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsxs("div", { children: [_jsx("strong", { children: "Construction:" }), " ", rug.construction] }), _jsxs("div", { children: [_jsx("strong", { children: "Quality:" }), " ", rug.quality] }), _jsxs("div", { children: [_jsx("strong", { children: "Size:" }), " ", rug.size] }), _jsxs("div", { children: [_jsx("strong", { children: "Color:" }), " ", rug.color] }), _jsxs("div", { children: [_jsx("strong", { children: "Order Type:" }), " ", rug.orderType] }), _jsxs("div", { children: [_jsx("strong", { children: "Buyer:" }), " ", rug.buyerName] }), _jsxs("div", { children: [_jsx("strong", { children: "OPS No:" }), " ", rug.opsNo] }), _jsxs("div", { children: [_jsx("strong", { children: "Carpet No:" }), " ", rug.carpetNo] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Technical Details" }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsxs("div", { children: [_jsx("strong", { children: "Finished GSM:" }), " ", rug.finishedGSM] }), _jsxs("div", { children: [_jsx("strong", { children: "Unfinished GSM:" }), " ", rug.unfinishedGSM] }), _jsxs("div", { children: [_jsx("strong", { children: "Dyeing Type:" }), " ", rug.typeOfDyeing] }), _jsxs("div", { children: [_jsx("strong", { children: "Reed No/Quality:" }), " ", rug.reedNoQuality] }), _jsxs("div", { children: [_jsx("strong", { children: "Washing:" }), " ", rug.hasWashing] }), _jsxs("div", { children: [_jsx("strong", { children: "Submitted By:" }), " ", rug.submittedBy] }), _jsxs("div", { children: [_jsx("strong", { children: "Area:" }), " ", rug.area, " sq ft"] })] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Materials" }), _jsx("div", { className: "space-y-2", children: rug.materials.map((material, index) => (_jsxs("div", { className: "flex justify-between items-center text-sm bg-gray-50 p-2 rounded", children: [_jsxs("span", { children: [material.name, " (", material.type, ")"] }), _jsxs("span", { className: "text-gray-600", children: ["Consumption: ", material.consumption] })] }, index))) })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Process Flow" }), _jsx("div", { className: "grid grid-cols-2 gap-2", children: rug.processFlow.map((step, index) => (_jsxs("div", { className: "text-sm bg-blue-50 p-2 rounded", children: ["Step ", step.step, ": ", step.process] }, index))) })] })] })] }), _jsxs(Dialog, { children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { size: "sm", className: "w-full", onClick: () => setSelectedRug(rug), children: [_jsx(FileText, { className: "h-4 w-4 mr-2" }), "Create PDOC"] }) }), _jsxs(DialogContent, { children: [_jsx(DialogHeader, { children: _jsxs(DialogTitle, { children: ["Create PDOC for ", rug.designName] }) }), _jsxs("div", { className: "space-y-4 py-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Select Buyer" }), _jsxs(Select, { value: selectedBuyerId?.toString(), onValueChange: (value) => setSelectedBuyerId(parseInt(value)), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select a buyer..." }) }), _jsx(SelectContent, { children: buyers.map((buyer) => (_jsxs(SelectItem, { value: buyer.id.toString(), children: [buyer.buyerName, " - ", buyer.buyerCode, _jsxs("div", { className: "text-xs text-gray-500 mt-1", children: ["Merchant: ", buyer.merchantName] })] }, buyer.id))) })] })] }), _jsxs("div", { className: "flex justify-end space-x-3", children: [_jsx(Button, { variant: "outline", onClick: () => setSelectedRug(null), children: "Cancel" }), _jsx(Button, { onClick: handleCreatePDOC, disabled: !selectedBuyerId, children: "Create PDOC" })] })] })] })] })] })] }, rug.id))) }), filteredRugs.length === 0 && (_jsxs("div", { className: "text-center py-12", children: [_jsx(Package, { className: "h-12 w-12 text-gray-400 mx-auto mb-4" }), _jsx("p", { className: "text-gray-500", children: "No products found matching your search." })] }))] }));
};
export default MerchandisingThumbnails;
